{"version":3,"file":"static/js/384.fe0ea366.chunk.js","mappings":"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","sources":["webpack://project05_frontend_test/./src/components/shared/RecipePage/RecipePage.module.scss?211e","components/shared/RecipePage/AddButton.jsx","components/shared/RecipePage/IngredientListItem.jsx","components/shared/RecipePage/IngredientList.jsx","components/shared/api/RecipeById/apiRecipeById.js","components/shared/RecipePage/RecipePage.jsx","pages/RecipePage/RecipePage.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"recipe_container\":\"RecipePage_recipe_container__gSv2v\",\"recipe_details_main\":\"RecipePage_recipe_details_main__klf4Z\",\"recipe_glass\":\"RecipePage_recipe_glass__-Tn9K\",\"recipe_title\":\"RecipePage_recipe_title__QipAi\",\"recipe_about\":\"RecipePage_recipe_about__pukPm\",\"add_button\":\"RecipePage_add_button__hE6zG\",\"drink_image\":\"RecipePage_drink_image__sO85K\",\"recipe_details\":\"RecipePage_recipe_details__Z7459\",\"recipe_ingredients_title\":\"RecipePage_recipe_ingredients_title__XKFjE\",\"recipe_ingredients\":\"RecipePage_recipe_ingredients__rXCll\",\"ingredient_list\":\"RecipePage_ingredient_list__p2Jts\",\"ingredient_item\":\"RecipePage_ingredient_item__tlSrP\",\"ingredient_photo\":\"RecipePage_ingredient_photo__507zr\",\"ingredient_title\":\"RecipePage_ingredient_title__nE4DX\",\"ingredient_information\":\"RecipePage_ingredient_information__X538O\",\"ingredient_measure\":\"RecipePage_ingredient_measure__cfFXL\",\"recipe_preparations_title\":\"RecipePage_recipe_preparations_title__RAEay\",\"recipe_instructions\":\"RecipePage_recipe_instructions__P9u+9\",\"recipe_instructions_text\":\"RecipePage_recipe_instructions_text__R9Ue0\",\"recipe_preparations_info\":\"RecipePage_recipe_preparations_info__1O6B3\",\"preparation_image\":\"RecipePage_preparation_image__3unAu\"};","// import {useParams} from 'react-router-dom';\n\n\n\n\nimport css from './RecipePage.module.scss';\n\n\nexport const RemoveButton = ({ id, type = 'submit', onDeleteFavorites, children=\"Remove from favorites\" }) => {\n    \n    return (\n      <button\n        onClick={() => onDeleteFavorites(id)}\n        className={css.add_button}\n        type={type}\n      >\n        {children}\n      </button>\n    );\n  };\n  \n  \nexport const AddButton = ({ id, type = 'submit', handleFavButton, children=\"Add to favorites\" }) => {\n    \n    return (\n      <button\n        onClick={() => handleFavButton(id)}\n        className={css.add_button}\n        type={type}\n      >\n        {children}\n      </button>\n    );\n  };\n","import css from './RecipePage.module.scss';\nimport glass from '../../../images/glass.jpg';\n\n\nconst IngredientListItem = ({\n  \n    ingredientThumb,\n    title,\n    measure\n  }) => {\n    return (\n        \n      <li className={css.ingredient_item}>\n\n      \n        <img  \n         \n         alt=\"coctail_ingredient\" className={css.ingredient_photo}\n          src={ingredientThumb? ingredientThumb: glass}\n         />\n          \n         \n          \n        <div className={css.ingredient_information}><h2 className={css.ingredient_title}>{title} </h2>\n        <p className={css.ingredient_measure}>{measure}</p>\n        </div>\n         </li>\n    );\n  };\n  export default IngredientListItem;\n","import IngredientListItem from './IngredientListItem.jsx';\nimport css from './RecipePage.module.scss';\n// import { v4 as uuidv4 } from 'uuid';\nimport { nanoid } from 'nanoid'\n\nconst IngredientList = ({ items = [] }) => {\n    const elements = items.map(({ ...props }) => (\n      <IngredientListItem \n        key ={nanoid()}\n       {...props} />\n    ));\n    return <ul className={css.ingredient_list}>{elements}</ul>;\n  };\n  export default IngredientList;\n","import axios from 'axios';\n\nexport default async function fetchDetails(recipeId) {\n  const token = localStorage.getItem('token');\n    const instance = axios.create({\n        baseURL: 'https://project05-backend.onrender.com',\n      });\n      \n      instance.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n      \n      const {data} = await instance.get(`/api/recipes/${recipeId}`);\n      console.log(data);\n       \n      return data;\n\n  };\n  export const FetchId = async(email)=> {\n    const token = localStorage.getItem('token');\n        \n      const instance = axios.create({\n          baseURL: 'https://project05-backend.onrender.com',\n        });\n        \n        instance.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n        // https://project05-backend.onrender.com/api/auth/:id?email=simp%40son.ca\n        \n        const {data} = await instance.get(`/api/auth/:id?email=${email}`);\n       const userId= (data.user._id);\n         console.log(userId)\n        return userId;\n      }\n\n \n  \n","import { useState, useEffect } from 'react';\nimport { useSelector } from \"react-redux\";\nimport { useDispatch } from 'react-redux';\nimport { addFavorites, deleteFavorites } from 'redux/favoriteCocktails/favorites-operations';\n\nimport {useParams} from 'react-router-dom';\nimport PreparationCocktail from '../../../images/PreparationCocktail.jpg';\nimport { AddButton, RemoveButton } from './AddButton';\nimport IngredientList from './IngredientList';\nimport css from './RecipePage.module.scss';\nimport fetchDetails from '../api/RecipeById/apiRecipeById';\nimport cocktailGlass from '../../../images/cocktailglass.jpg';\nimport { FetchId } from '../api/RecipeById/apiRecipeById';\nimport Loader from '../Loader/Loader';\nconst RecipeDetails = ()=> {\n    const dispatch = useDispatch();\n  \n\nconst [recipe, setRecipe] = useState('');\nconst [loading, setLoading] = useState(false);\nconst [id, setId] = useState('');\nconst [usersId, setUsersId]= useState([]);\n\nconst { recipeId } = useParams();\nconst [favorite, setFavorite] =useState(false)\n\n  useEffect(() => {\n        if (recipeId === '') {\n          return;\n        }\n        fetchUserID();\n      fetchRecipeDetails();\n\n         // eslint-disable-next-line \n      }, [recipeId]);\n    \n   \n \n\n      const fetchRecipeDetails = () => {\n        setLoading(true);\n        fetchDetails(recipeId).then(data => {\n          setRecipe(data);\n    \n          setUsersId(data.usersId);\n          \n          setLoading(false);\n        });\n      };\n      const onDeleteFavorites = recipeId => {\n     \n        dispatch(deleteFavorites(recipeId));\n        fetchRecipeDetails();\n        setFavorite(false)\n      };\n      const handleFavButton = recipeId=> {\n        dispatch(addFavorites(recipeId)); \n        fetchRecipeDetails();\n        setFavorite(true)  };\n\n     \n      const email = useSelector(state => state.auth.data.user.email);\n    const fetchUserID = () => {\n      setLoading(true);\n      FetchId(email).then(data => {\n        setId(data);\n     \n        setLoading(false);\n      });\n    };\n   \n      return (\n        <div className={css.recipe_container}>\n         \n          {loading && <div><Loader/></div>}\n          <div className={css.recipe_details}>\n          <div className={css.recipe_details_main}>\n          <p className={css.recipe_glass}>{recipe.glass}</p>\n          <h2 className={css.recipe_title}>{recipe.drink}</h2>\n          <p className={css.recipe_about}> { recipe.description? recipe.drink: \"Do you want to mix up some quick and easy cocktail at home? This recipe is for you.\"}  </p>\n          <div>\n         { favorite || usersId.includes(id)  ? <RemoveButton  id={recipeId} onDeleteFavorites={onDeleteFavorites} />: <AddButton id={recipeId} handleFavButton={handleFavButton}/>} \n        </div>\n\n          \n          </div>\n          <img \n      \n                      src ={recipe.drinkThumb? recipe.drinkThumb: cocktailGlass}\n                   \n                      alt=\"drink_photo\"\n                      className={css.drink_image}\n                    />\n          </div>\n          <div className={css.recipe_ingredients}>\n          <p className={css.recipe_ingredients_title}>Ingredients</p>\n          <div className={css.recipe_ingredients_list}>\n          <IngredientList items={recipe.ingredients}/>\n          </div>\n\n          </div>\n          <div className={css.recipe_preparations}>\n          <h3 className={css.recipe_preparations_title}>Recipe Preparation</h3>\n          <div className={css.recipe_preparations_info}>\n          <div className={css.recipe_instructions}>\n            <p className={css.recipe_instructions_text}> {recipe.instructions}</p>\n          </div>\n          \n          <img \n                 src= {PreparationCocktail}\n                alt=\"drink_photo\"\n                className={css.preparation_image}/>\n                  \n</div>\n          </div>\n      </div>\n    );\n  }\n  export default RecipeDetails;\n","import RecipeDetails from \"components/shared/RecipePage/RecipePage\";\nconst RecipePageById =() => {\n  return(\n    <RecipeDetails />\n  )\n\n}\nexport default RecipePageById;","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["RemoveButton","id","type","onDeleteFavorites","children","onClick","className","css","add_button","AddButton","handleFavButton","ingredientThumb","title","measure","ingredient_item","alt","ingredient_photo","src","glass","ingredient_information","ingredient_title","ingredient_measure","items","elements","map","props","nanoid","ingredient_list","recipeId","token","localStorage","getItem","instance","axios","create","baseURL","defaults","headers","common","get","data","console","log","FetchId","email","userId","user","_id","dispatch","useDispatch","useState","recipe","setRecipe","loading","setLoading","setId","usersId","setUsersId","useParams","favorite","setFavorite","useEffect","fetchUserID","fetchRecipeDetails","fetchDetails","then","useSelector","state","auth","recipe_container","Loader","recipe_details","recipe_details_main","recipe_glass","recipe_title","drink","recipe_about","description","includes","deleteFavorites","addFavorites","drinkThumb","cocktailGlass","drink_image","recipe_ingredients","recipe_ingredients_title","recipe_ingredients_list","ingredients","recipe_preparations","recipe_preparations_title","recipe_preparations_info","recipe_instructions","recipe_instructions_text","instructions","PreparationCocktail","preparation_image","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}